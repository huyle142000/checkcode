import React from "react";
import { useForm, Controller } from "react-hook-form";
import * as yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import { toast } from "react-toastify";

interface FormRegister {
  userName: string;
  birth: string;
  phone: string;
  email: string;
  password: string;
  passwordConfirmation: string;
}
let defaultValues: FormRegister = {
  email: "",
  password: "",
  userName: "",
  birth: "",
  phone: "",
  passwordConfirmation: "",
};
let regexUser =
  /^[a-z A-Z_√Ä√Å√Ç√É√à√â√ä·∫æ√å√ç√í√ì√î√ï√ô√öƒÇƒêƒ®≈®∆†√†√°√¢√£√®√©√™√¨√≠√≤√≥√¥√µ√π√∫ƒÉƒëƒ©≈©∆°∆ØƒÇ·∫†·∫¢·∫§·∫¶·∫®·∫™·∫¨·∫Æ·∫∞·∫≤·∫¥·∫∂·∫∏·∫∫·∫º·ªÄ·ªÄ·ªÇ∆∞ƒÉ·∫°·∫£·∫•·∫ß·∫©·∫´·∫≠·∫Ø·∫±·∫≥·∫µ·∫∑·∫π·∫ª·∫Ω·ªÅ·ªÅ·ªÉ·∫ø·ªÑ·ªÜ·ªà·ªä·ªå·ªé·ªê·ªí·ªî·ªñ·ªò·ªö·ªú·ªû·ª†·ª¢·ª§·ª¶·ª®·ª™·ªÖ·ªá·ªâ·ªã·ªç·ªè·ªë·ªì·ªï·ªó·ªô·ªõ·ªù·ªü·ª°·ª£·ª•·ªß·ª©·ª´·ª¨·ªÆ·ª∞·ª≤·ª¥√ù·ª∂·ª∏·ª≠·ªØ·ª±·ª≥·ªµ·ª∑·ªπ√Ω\\s]+$/;
const Uselogin = () => {
  const schema = yup.object().shape(
    {
      email: yup
        .string()
        .trim()
        .email("Tr∆∞·ªùng n√†y kh√¥ng ph·∫£i Email")
        .required("Y√™u c·∫ßu bu·ªôc nh·∫≠p tr∆∞·ªùng n√†y"),
      userName: yup
        .string()
        .required("Y√™u c·∫ßu bu·ªôc nh·∫≠p tr∆∞·ªùng n√†y")
        .trim()
        .min(3, "Nh·∫≠p √≠t nh·∫•t 3 k√≠ t·ª±")
        .matches(regexUser, "H·ªç T√™n kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng"),
      password: yup
        .string()
        .trim()
        .required("Y√™u c·∫ßu bu·ªôc nh·∫≠p tr∆∞·ªùng n√†y")
        .min(5, "Nh·∫≠p √≠t nh·∫•t 5 k√≠ t·ª±"),
      passwordConfirmation: yup
        .string()
        .trim()
        .required("M·∫≠t kh·∫©u kh√¥ng tr√πng kh·ªõp")
        .oneOf([yup.ref("password")], "M·∫≠t kh·∫©u kh√¥ng tr√πng kh·ªõp"),
      birth: yup
        .string()
        .trim()
        .when("birth", (val, schema) => {
          if (val[0]) {
            return yup.date().typeError("Sai ƒë·ªãnh d·∫°ng ng√†y");
          } else {
            return yup.string().notRequired();
          }
        }),

      phone: yup
        .string()
        .trim()
        .when("phone", (val: any, schema) => {
          if (val?.toString().replace(/^\s+|\s+$/gm, "").length > 0) {
            return yup
              .string()
              .min(10, "Nh·∫≠p √≠t nh·∫•t 10 k√≠ t·ª± s·ªë")
              .max(12, "T·ªëi ƒëa 12 ch·ªØ s·ªë")
              .matches(/^-?\d+\.?\d*$/, "Kh√¥ng ch·ª©a k√≠ t·ª± ch·ªØ");
          } else {
            return yup.string().notRequired();
          }
        }),
    },
    [
      ["birth", "birth"],
      ["phone", "phone"],
    ]
  );
  const {
    control,
    handleSubmit,
    formState: { errors },
  } = useForm<FormRegister>({
    mode: "onBlur",
    defaultValues,
    resolver: yupResolver(schema),
  });

  const onSubmit = (data: FormRegister) => {
    console.log(data, "data");
    toast("ü¶Ñ ƒêƒÉng k√≠ th√†nh c√¥ng", {
      position: "top-center",
      autoClose: 5000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      progress: undefined,
      theme: "dark",
    });
  };
  return {
    control,
    handleSubmit,
    errors,
    onSubmit,
  };
};

export default Uselogin;
